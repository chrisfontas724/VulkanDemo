// Copyright 2019 Sic Studios. All rights reserved.
// Use of this source code is governed by our license that can be
// found in the LICENSE file.

#include "types/ray.comp"
#include "types/intersection.comp"
#include "sampling/random.comp"

#define WORKGROUP_SIZE 512

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

layout(std430, set = 0, binding = 0) buffer buf {
   Ray rays[];
};


layout(std140, set = 0, binding = 1) buffer buf1 {
    HitPoint hits[];
};


layout(std140, set = 0, binding = 2) buffer buf2 {
    float rng_seeds[];
};

Ray sample_ray(Ray ray, vec4 N, vec4 P, inout float seed, inout float pdf) {
    float xi1 = getRand(seed); 
    float xi2 = getRand(seed); 

    float theta = acos(sqrt(1.0 -xi1));
    float phi = 2.0 * 3.14159265 * xi2;

    float xs = sin(theta) * cos(phi);
    float ys = cos(theta);
    float zs = sin(theta) * sin(phi);

    vec3 y = vec3(N.xyz);
    vec3 h = y;

    if (abs(h.x) <= abs(h.y) && abs(h.x) <= abs(h.z)) {
        h.x = 1.0;
    } else if (abs(h.y) <= abs(h.x) && abs(h.y) <= abs(h.z)) {
        h.y = 1.0;
    } else {
        h.z = 1.0;
    }

    vec3 x = normalize(cross(h,y));
    vec3 z = normalize(cross(x,y));

    vec3 new_dir = normalize(xs*x + ys*y + zs*z);

    Ray new_ray;
    new_ray.direction = vec4(new_dir, 0.0);
    new_ray.weight = vec4(1.0);
    new_ray.coord = ray.coord;

    // Add a small epsilon to the new ray starting point to prevent self-intersection
    // with the object its already on.
    new_ray.origin = P + 0.001 * new_ray.direction;
    pdf = dot(new_dir, N.xyz) / 3.14159265;
    return new_ray;
}

void main() {
    const uint index = gl_GlobalInvocationID.x;

    Ray input_ray = rays[index];
    HitPoint hit = hits[index];
    float rng_seed = rng_seeds[index];


    if (hit.t < 0.) {
        Ray output_ray;
        output_ray.weight = vec4(0,0,0,1);
        output_ray.direction = vec4(0);
        output_ray.direction = vec4(0);
        rays[index] = output_ray;
        return;
    }

    float pdf;
    Ray output_ray = sample_ray(input_ray, hit.norm, hit.pos, rng_seed, pdf);


    rays[index] = output_ray;
    hits[index].t = -1.0;
    rng_seeds[index] = rng_seed;
}